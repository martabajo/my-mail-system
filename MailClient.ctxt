#BlueJ class context
comment0.params=server\ user
comment0.target=MailClient(MailServer,\ java.lang.String)
comment0.text=\r\n\ Disponga\ de\ un\ constructor\ que\ permita\ crear\ un\ objeto\ `MailClient`\ inicializando\ sus\ atributos\ por\ medio\ de\ par\u00E1metros.\r\n
comment1.params=
comment1.target=MailItem\ getNextMailItem()
comment1.text=\r\n\ Disponga\ de\ un\ m\u00E9todo\ llamado\ `getNextMailItem`\ que\ recupere\ del\ servidor\ el\ siguiente\ correo\ (un\ objeto\ `MailItem`)\ que\ tenga\ el\ usuario\ y\ devuelva\ dicho\ objeto.\r\n
comment2.params=
comment2.target=void\ printNextMailItem()
comment2.text=\r\n\ Disponga\ de\ un\ m\u00E9todo\ llamado\ `printNextMailItem`\ que\ recupere\ del\ servidor\ el\ siguiente\ correo\ (un\ objeto\ `MailItem`)\ que\ tenga\ el\ usuario\ e\ imprima\ por\ pantalla\ los\ datos\ de\ dicho\ mensaje.\ Si\ no\ hay\ ningun\ mensaje,\ \r\n\ que\ muestre\ un\ mensaje\ por\ pantalla\ informando\ de\ ello.\ \r\n
comment3.params=to\ message\ subject
comment3.target=void\ sendMailItem(java.lang.String,\ java.lang.String,\ java.lang.String)
comment3.text=\r\n\ Disponga\ de\ un\ m\u00E9todo\ llamado\ `sendMailItem`\ que\ reciba\ 2\ par\u00E1metros\ (un\ `String`\ indicando\ para\ qui\u00E9n\ es\ el\ mensaje\ y\ \r\n\ otro\ `String`\ indicando\ el\ contenido\ del\ mensaje),\ cree\ un\ email\ (objeto\ `MailItem`)\r\n\ bas\u00E1ndose\ en\ la\ informaci\u00F3n\ de\ dichos\ par\u00E1metros\ y\ lo\ env\u00EDe\ al\ servidor\ asociado\ a\ ese\ cliente.\r\n
comment4.params=
comment4.target=void\ howManyMailItems()
comment4.text=\r\n\ Crear\ un\ metodo\ que\ nos\ diga\ cuantos\ emails\ tenemos.\r\n
comment5.params=
comment5.target=void\ getNextMailItemAndAutorespond()
comment5.text=\r\n\ Crear\ un\ metodo\ getNextMailItemAndAutorespond\ que\ nos\ devuelva\ un\ mensaje.\r\n
numComments=6
